/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>



#include "LocationEngine/src/Entity/IPXBeacon.h"
#include "LocationEngine/src/Entity/IPXPoint.h"
#include "LocationEngine/src/Entity/IPXPublicBeacon.h"
#include "LocationEngine/src/Entity/IPXScannedBeacon.h"

#include "LocationEngine/src/LocationEngine/ILocationEngine.h"

using namespace std;
using namespace Innerpeacer::BLELocationEngine;


SWIGINTERN std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::const_reference std_vector_Sl_Innerpeacer_BLELocationEngine_IPXPublicBeacon_Sg__get(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Innerpeacer_BLELocationEngine_IPXPublicBeacon_Sg__set(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *self,int i,std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::const_reference std_vector_Sl_Innerpeacer_BLELocationEngine_IPXScannedBeacon_SS_const_Sm__Sg__get(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Innerpeacer_BLELocationEngine_IPXScannedBeacon_SS_const_Sm__Sg__set(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *self,int i,std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXBeacon_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::IPXBeacon *)new Innerpeacer::BLELocationEngine::IPXBeacon();
  *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXBeacon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (Innerpeacer::BLELocationEngine::IPXBeacon *)new Innerpeacer::BLELocationEngine::IPXBeacon((char const *)arg1,arg2,arg3);
  *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1IPXBeacon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::IPXBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXBeacon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXBeacon_1getMajor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXBeacon *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg1; 
  result = (uint16_t)((Innerpeacer::BLELocationEngine::IPXBeacon const *)arg1)->getMajor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXBeacon_1getMinor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXBeacon *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg1; 
  result = (uint16_t)((Innerpeacer::BLELocationEngine::IPXBeacon const *)arg1)->getMinor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXBeacon_1getUuid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXBeacon *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg1; 
  result = ((Innerpeacer::BLELocationEngine::IPXBeacon const *)arg1)->getUuid();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_hash_1beacon_1key_1HashBeaconKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::hash_beacon_key *arg1 = (Innerpeacer::BLELocationEngine::hash_beacon_key *) 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::hash_beacon_key **)&jarg1; 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXBeacon const & reference is null");
    return 0;
  } 
  result = ((Innerpeacer::BLELocationEngine::hash_beacon_key const *)arg1)->operator ()((Innerpeacer::BLELocationEngine::IPXBeacon const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1hash_1beacon_1key(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::hash_beacon_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::hash_beacon_key *)new Innerpeacer::BLELocationEngine::hash_beacon_key();
  *(Innerpeacer::BLELocationEngine::hash_beacon_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1hash_1beacon_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::hash_beacon_key *arg1 = (Innerpeacer::BLELocationEngine::hash_beacon_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::hash_beacon_key **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_equal_1beacon_1key_1EqualBeaconKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Innerpeacer::BLELocationEngine::equal_beacon_key *arg1 = (Innerpeacer::BLELocationEngine::equal_beacon_key *) 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *arg2 = 0 ;
  Innerpeacer::BLELocationEngine::IPXBeacon *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Innerpeacer::BLELocationEngine::equal_beacon_key **)&jarg1; 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXBeacon const & reference is null");
    return 0;
  } 
  arg3 = *(Innerpeacer::BLELocationEngine::IPXBeacon **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXBeacon const & reference is null");
    return 0;
  } 
  result = (bool)((Innerpeacer::BLELocationEngine::equal_beacon_key const *)arg1)->operator ()((Innerpeacer::BLELocationEngine::IPXBeacon const &)*arg2,(Innerpeacer::BLELocationEngine::IPXBeacon const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1equal_1beacon_1key(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::equal_beacon_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::equal_beacon_key *)new Innerpeacer::BLELocationEngine::equal_beacon_key();
  *(Innerpeacer::BLELocationEngine::equal_beacon_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1equal_1beacon_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::equal_beacon_key *arg1 = (Innerpeacer::BLELocationEngine::equal_beacon_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::equal_beacon_key **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXPublicBeacon_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPublicBeacon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::IPXPublicBeacon *)new Innerpeacer::BLELocationEngine::IPXPublicBeacon();
  *(Innerpeacer::BLELocationEngine::IPXPublicBeacon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXPublicBeacon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg4 = 0 ;
  Innerpeacer::BLELocationEngine::IPXPublicBeacon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint & reference is null");
    return 0;
  } 
  result = (Innerpeacer::BLELocationEngine::IPXPublicBeacon *)new Innerpeacer::BLELocationEngine::IPXPublicBeacon((char const *)arg1,arg2,arg3,*arg4);
  *(Innerpeacer::BLELocationEngine::IPXPublicBeacon **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1IPXPublicBeacon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::IPXPublicBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXPublicBeacon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPublicBeacon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPublicBeacon_1getLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPublicBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXPublicBeacon *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPublicBeacon **)&jarg1; 
  result = ((Innerpeacer::BLELocationEngine::IPXPublicBeacon const *)arg1)->getLocation();
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = new Innerpeacer::BLELocationEngine::IPXPoint((const Innerpeacer::BLELocationEngine::IPXPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPublicBeacon_1setLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Innerpeacer::BLELocationEngine::IPXPublicBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXPublicBeacon *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint arg2 ;
  Innerpeacer::BLELocationEngine::IPXPoint *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPublicBeacon **)&jarg1; 
  argp2 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Innerpeacer::BLELocationEngine::IPXPoint");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setLocation(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::IPXPoint *)new Innerpeacer::BLELocationEngine::IPXPoint();
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  Innerpeacer::BLELocationEngine::IPXPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (Innerpeacer::BLELocationEngine::IPXPoint *)new Innerpeacer::BLELocationEngine::IPXPoint(arg1,arg2);
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  Innerpeacer::BLELocationEngine::IPXPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (Innerpeacer::BLELocationEngine::IPXPoint *)new Innerpeacer::BLELocationEngine::IPXPoint(arg1,arg2,arg3);
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXPoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  result = (Innerpeacer::BLELocationEngine::IPXPoint *)new Innerpeacer::BLELocationEngine::IPXPoint((Innerpeacer::BLELocationEngine::IPXPoint const &)*arg1);
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1assignment_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg2 = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  result = (arg1)->operator =((Innerpeacer::BLELocationEngine::IPXPoint const &)*arg2);
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = new Innerpeacer::BLELocationEngine::IPXPoint((const Innerpeacer::BLELocationEngine::IPXPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1IPXPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1getFloor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  result = (int)((Innerpeacer::BLELocationEngine::IPXPoint const *)arg1)->getFloor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1setFloor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFloor(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  result = (double)((Innerpeacer::BLELocationEngine::IPXPoint const *)arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  result = (double)((Innerpeacer::BLELocationEngine::IPXPoint const *)arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1DistanceBetween(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  result = (double)Innerpeacer::BLELocationEngine::IPXPoint::DistanceBetween((Innerpeacer::BLELocationEngine::IPXPoint const &)*arg1,(Innerpeacer::BLELocationEngine::IPXPoint const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1distanceBetween(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  result = (double)(arg1)->distanceBetween((Innerpeacer::BLELocationEngine::IPXPoint const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1equal_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((Innerpeacer::BLELocationEngine::IPXPoint const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPoint_1not_1equal_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  arg2 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Innerpeacer::BLELocationEngine::IPXPoint const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator !=((Innerpeacer::BLELocationEngine::IPXPoint const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_INVALID_1POINT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Innerpeacer::BLELocationEngine::IPXPoint *arg1 = (Innerpeacer::BLELocationEngine::IPXPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXPoint **)&jarg1; 
  Innerpeacer::BLELocationEngine::INVALID_POINT = *arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_INVALID_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::IPXPoint *)&Innerpeacer::BLELocationEngine::INVALID_POINT;
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXProximityUnknwon_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXProximity result;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::BLELocationEngine::IPXProximity)Innerpeacer::BLELocationEngine::IPXProximityUnknwon;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1IPXScannedBeacon(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5, jint jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  int arg4 ;
  double arg5 ;
  Innerpeacer::BLELocationEngine::IPXProximity arg6 ;
  Innerpeacer::BLELocationEngine::IPXScannedBeacon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (Innerpeacer::BLELocationEngine::IPXProximity)jarg6; 
  result = (Innerpeacer::BLELocationEngine::IPXScannedBeacon *)new Innerpeacer::BLELocationEngine::IPXScannedBeacon((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(Innerpeacer::BLELocationEngine::IPXScannedBeacon **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1IPXScannedBeacon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::IPXScannedBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXScannedBeacon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXScannedBeacon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXScannedBeacon_1getRssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXScannedBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXScannedBeacon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXScannedBeacon **)&jarg1; 
  result = (int)((Innerpeacer::BLELocationEngine::IPXScannedBeacon const *)arg1)->getRssi();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXScannedBeacon_1getAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXScannedBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXScannedBeacon *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXScannedBeacon **)&jarg1; 
  result = (double)((Innerpeacer::BLELocationEngine::IPXScannedBeacon const *)arg1)->getAccuracy();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXScannedBeacon_1getProximity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::BLELocationEngine::IPXScannedBeacon *arg1 = (Innerpeacer::BLELocationEngine::IPXScannedBeacon *) 0 ;
  Innerpeacer::BLELocationEngine::IPXProximity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::IPXScannedBeacon **)&jarg1; 
  result = (Innerpeacer::BLELocationEngine::IPXProximity)((Innerpeacer::BLELocationEngine::IPXScannedBeacon const *)arg1)->getProximity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1VectorOfPublicBeacon_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *)new std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >();
  *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1VectorOfPublicBeacon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::size_type arg1 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::size_type)jarg1; 
  result = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *)new std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >(arg1);
  *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  result = ((std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  result = ((std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  arg2 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  result = (bool)((std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  arg2 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type *) &std_vector_Sl_Innerpeacer_BLELocationEngine_IPXPublicBeacon_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfPublicBeacon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Innerpeacer_BLELocationEngine_IPXPublicBeacon_Sg__set(arg1,arg2,(Innerpeacer::BLELocationEngine::IPXPublicBeacon const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1VectorOfPublicBeacon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1VectorOfScannedBeaconPointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *)new std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >();
  *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_new_1VectorOfScannedBeaconPointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::size_type arg1 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::size_type)jarg1; 
  result = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *)new std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >(arg1);
  *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  result = ((std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  result = ((std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  arg2 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  result = (bool)((std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *arg2 = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  temp2 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *)&jarg2;
  arg2 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *) &std_vector_Sl_Innerpeacer_BLELocationEngine_IPXScannedBeacon_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_VectorOfScannedBeaconPointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *arg3 = 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *)&jarg3;
  arg3 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Innerpeacer_BLELocationEngine_IPXScannedBeacon_SS_const_Sm__Sg__set(arg1,arg2,(Innerpeacer::BLELocationEngine::IPXScannedBeacon const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1VectorOfScannedBeaconPointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg1 = (std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_ILocationEngine_1Initilize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  Innerpeacer::BLELocationEngine::ILocationEngine *arg1 = (Innerpeacer::BLELocationEngine::ILocationEngine *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jarg1; 
  arg2 = *(std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Initilize((std::vector< Innerpeacer::BLELocationEngine::IPXPublicBeacon > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_ILocationEngine_1processBeacons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Innerpeacer::BLELocationEngine::ILocationEngine *arg1 = (Innerpeacer::BLELocationEngine::ILocationEngine *) 0 ;
  std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jarg1; 
  arg2 = *(std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Innerpeacer::BLELocationEngine::IPXScannedBeacon const * > & reference is null");
    return ;
  } 
  (arg1)->processBeacons(*arg2);
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_ILocationEngine_1addStepEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Innerpeacer::BLELocationEngine::ILocationEngine *arg1 = (Innerpeacer::BLELocationEngine::ILocationEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jarg1; 
  (arg1)->addStepEvent();
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_ILocationEngine_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Innerpeacer::BLELocationEngine::ILocationEngine *arg1 = (Innerpeacer::BLELocationEngine::ILocationEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_ILocationEngine_1getLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::BLELocationEngine::ILocationEngine *arg1 = (Innerpeacer::BLELocationEngine::ILocationEngine *) 0 ;
  Innerpeacer::BLELocationEngine::IPXPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jarg1; 
  result = ((Innerpeacer::BLELocationEngine::ILocationEngine const *)arg1)->getLocation();
  *(Innerpeacer::BLELocationEngine::IPXPoint **)&jresult = new Innerpeacer::BLELocationEngine::IPXPoint((const Innerpeacer::BLELocationEngine::IPXPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_delete_1ILocationEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::BLELocationEngine::ILocationEngine *arg1 = (Innerpeacer::BLELocationEngine::ILocationEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_CreateIPXStepBaseTriangulationEngine(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  IPXAlgorithmType arg1 ;
  Innerpeacer::BLELocationEngine::ILocationEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (IPXAlgorithmType)jarg1; 
  result = (Innerpeacer::BLELocationEngine::ILocationEngine *)CreateIPXStepBaseTriangulationEngine(arg1);
  *(Innerpeacer::BLELocationEngine::ILocationEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXPublicBeacon_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Innerpeacer::BLELocationEngine::IPXBeacon **)&baseptr = *(Innerpeacer::BLELocationEngine::IPXPublicBeacon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_locationengine_swig_TYLocationEngineJNI_IPXScannedBeacon_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Innerpeacer::BLELocationEngine::IPXBeacon **)&baseptr = *(Innerpeacer::BLELocationEngine::IPXScannedBeacon **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

